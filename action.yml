name: Rust toolchain installation
description: Install Rust toolchain

inputs:
  toolchain:
    description: Rust toolchain
    default: stable

  components:
    description: Extra components to install, separated by space

runs:
  using: composite
  steps:
    - name: Configure Homebrew cache
      if: runner.os == 'macos'
      uses: actions/cache@v4
      with:
        key: homebrew-${{ runner.arch }}
        path: |
          ~/Library/Caches/Homebrew
    
    - name: Configure Cargo source cache
      uses: actions/cache@v4
      with:
        enableCrossOsArchive: true
        key: cargo-source-${{ inputs.toolchain }}-${{ hashFiles('**/Cargo.lock') || hashFiles('**/Cargo.toml') }}
        path: |
          ~/.cargo/git/db
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
    
    - name: Configure Cargo target cache
      uses: actions/cache@v4
      with:
        key: cargo-target-${{ runner.os }}-${{ runner.arch }}-${{ inputs.toolchain }}-${{ hashFiles('**/Cargo.lock') || hashFiles('**/Cargo.toml') }}
        path: |
          target
    
    - name: Configure Rust toolchain cache
      uses: actions/cache@v4
      with:
        key: rustup-${{ runner.os }}-${{ runner.arch }}-${{ inputs.toolchain }}${{ inputs.components && '-' }}${{ inputs.components }}
        path: |
          ~/.rustup/toolchains
    
    - name: Configure Cargo
      shell: bash
      run: |
        cat <<EOF >>"${GITHUB_ENV}"
        RUST_BACKTRACE=1
        RUSTC_BOOTSTRAP=1
        RUSTUP_TERM_COLOR=always
        EOF

        mkdir -p ~/.cargo
        cat <<EOF >~/.cargo/config.toml
        [term]
        color = 'always'
        unicode = true

        [profile.dev]
        opt-level = 2
        debug = 'line-tables-only'
        strip = "none"
        debug-assertions = true
        overflow-checks = true
        lto = 'thin'
        panic = 'unwind'
        incremental = true
        
        [profile.dev.build-override]
        debug = 'line-tables-only'
        EOF
    
    - name: Set up development environment
      if: runner.os == 'Linux'
      shell: bash
      run: |
        release="$(lsb_release --short --codename)"

        sudo tee /etc/apt/apt.conf.d/99recommends <<EOF
        APT::Install-Recommends "0";
        EOF
        
        sudo tee /etc/apt/sources.list.d/ubuntu.sources <<EOF
        Types: deb
        URIs: http://azure.archive.ubuntu.com/ubuntu/
        Suites: ${release} ${release}-updates ${release}-security
        Components: main restricted universe
        Architectures: amd64
        
        Types: deb
        URIs: http://azure.ports.ubuntu.com/ubuntu-ports/
        Suites: ${release} ${release}-updates ${release}-security
        Components: main restricted universe
        Architectures: arm64 riscv64
        EOF
        
        sudo apt update
        
        if [[ '${{ runner.arch }}' == X64 ]]; then
          sudo dpkg --add-architecture riscv64
        fi
        
        sudo apt install musl-tools {libc,musl,libssl}-dev
        
        if [[ '${{ runner.arch }}' == X64 ]]; then
          sudo apt install qemu-user gcc-riscv64-linux-gnu {libc,musl,libssl}-dev:riscv64
        fi

        cat <<EOF >>~/.cargo/config.toml
        [target.'cfg(target_arch = "x86_64")']
        rustflags = [ '-C', 'target-cpu=x86-64-v3' ]
        
        [target.'cfg(all(target_arch = "riscv64", target_os = "linux"))']
        linker = 'riscv64-linux-gnu-gcc'
        runner = [ "qemu-riscv64", "-L", "/usr/lib/riscv64-linux-gnu" ]
        EOF
    
    - name: Set up development environment
      if: runner.os == 'macOS'
      shell: sh
      run: |
        cat >>~/.cargo/config.toml <<EOF
        [target.'cfg(target_arch = "x86_64")']
        rustflags = [ '-C', 'target-cpu=x86-64-v3' ]

        [target.'cfg(target_arch = "aarch64")']
        rustflags = [ '-C', 'target-cpu=apple-a14' ]
        EOF
    
    - name: Set up development environment
      if: runner.os == 'Windows'
      shell: bash
      run: |
        choco install openssl
        
        cat >>~/.cargo/config.toml <<EOF
        [target.'cfg(target_arch = "x86_64")']
        rustflags = [ '-C', 'target-cpu=x86-64-v3' ]
        EOF

    - name: Install Rust toolchain
      shell: bash
      run: |
        case '${{ runner.os }} ${{ runner.arch }}' in
        "Linux X64")
          targets=(x86_64-unknown-linux-gnu x86_64-unknown-linux-musl riscv64gc-unknown-linux-gnu);;
        "Linux ARM64")
          targets=(aarch64-unknown-linux-gnu aarch64-unknown-linux-musl);;
        "macOS X64")
          targets=(x86_64-apple-darwin);;
        "macOS ARM64")
          targets=(aarch64-apple-darwin);;
        "Windows X64")
          targets=(x86_64-pc-windows-gnu x86_64-pc-windows-msvc);;
        esac
        
        echo "RUST_TARGET_NATIVE=${targets[0]}" >>"${GITHUB_ENV}"
        
        printf "\n\n[build]\ntarget =[\n" >>~/.cargo/config.toml
        for target in "${targets[@]}"; do
          printf "  '%s',\n" "${target}" >>~/.cargo/config.toml
        done
        printf "]\n" >>~/.cargo/config.toml
        
        rustup set profile minimal
        rustup set auto-self-update disable
        rustup toolchain install '${{ inputs.toolchain }}'
        rustup target add "${targets[@]}"
        
        if [[ -n '${{ inputs.components }}' ]]; then
          rustup component add ${{ inputs.components }}
        fi
